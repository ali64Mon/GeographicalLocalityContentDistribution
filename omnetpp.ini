#General paramteters
[General]
network = networks.${net=dtelecom_edges}_network

#<aa> RNG means "random number genetator". By default, all modules use the RNG 0. Here we instantiate other two RNGs. RNG 1 will be used only for the traffic generator (client) and content distribution. RNG 2 will be used only for the content store.  In this way, for example, the generation of requests is independent from the decisions taken by the decision policy in the context store. All the other modules will use the default RNG (RNG 0). See omnet manual section 10.5 for more info about RNGs.
num-rngs=3
**.client[*].rng-0 = 1
**.content_distribution.rng-0 = 1
**.content_store.rng-0 = 2
#</aa>

cmdenv-express-mode = true
seed-set = ${rep = 0}
**.vector-recording = false


#####################################################################
######################## Repositories ##############################
#####################################################################
## (In the case of standard topologies, like tree or cascades,
## repositories are placed within the corresponding ned file.
##Indicates which node is a repository (left blank for random positioning)
**.node_repos = ""
##Indicates how many repositories there are on the network
**.num_repos  = ${numRepos = 1 }
##Indicates in how many (random) repositories a given content is replicated
*.replicas = 1


#####################################################################
########################## Clients ################################
#####################################################################
## (In the case of standard topologies, like tree or cascades,
## clients are placed within the corresponding ned file.
##Indicates which node is a client (left blank for random positioning)
**.node_clients = ""
##Indicates how many clients there are on the network
**.num_clients = ${numClients = 1 }
##Arriva rate of each timer
**.lambda = ${lam = 4 }
##Timer indicating that a given content is not downloaded (>> N_D*d, where N_D is the network diameter, and d is the average delay on a link)
**.RTT = 2
##Timer indicating how often checking for a given content download
**.check_time = 0.1
## Indicates the type of the simulated clients: Independent Request Model (IRM) (other options, like ShotNoise or Window are still in alpha version) GeographicalLocality, 
**.client_type = "client_${clientType = GeographicalLocality }"



#####################################################################
################### Content Distribution ###########################
#####################################################################
##Average size of a content (in chunks)
**.file_size = 1
##Shaping factor of the Zipf distribution
**.alpha = ${alp=1}
##Cardinality of the catalog
**.objects = ${totCont = 2e4 }
## Content distribution type: IRM, ShotNoiseContentDistribution,  GeographicalLocalityContentDistribution  (Still alpha version; please comment this line if using IRM)
**.content_distribution_type = "${contDistrType =  GeographicalLocalityContentDistribution  }"

############ Geographical Locality Content Distribution ############
# Configuration File for the  Geographical Locality Model
**.request_patterns_file = "input_files/rp/${RPF=rp_dtel_edges1}.dat" 
**.client_to_region_map_file = "input_files/ntrm/${CTRM=ntrm_dtel_edges1}.dat" 
##**.total_cache = 1e5


#####################################################################
########################## Forwarding ##############################
#####################################################################
##Strategy layer (interest forwarding):
## - spr: send interests toward the closest repository (in terms of hop count)[comcom,techrep]
## - nrr1: nearest replica routing (one phase) [icn2012]
## - nrr:  nearest replica routing (two phases) [icn2012]
## - random_repository: send interests toward one randomly chosen repository among those which store the given chunk[comcom,techrep]
## - parallel_repository: send interests toward all the repositories which store the given chunk[comcom,techrep]
**.FS = "${ fs = spr }"

#nrr parameters 
**.TTL2 = ${ttl = 1000}
**.TTL1= ${ttl}
**.routing_file = ""

#####################################################################
########################## Caching ################################
#####################################################################
##Caching meta-algorithms: never, fixP, lce , lcd, btw, prob_cache, costawareP, ideal_blind, ideal_costaware
**.DS = "${ mc = lce }"
##Caching algorithms: {lru,lfu,fifo,two,random}_cache
**.RS = "${ rs = k2lru }_cache"
##Cache size (in chunks)
**.C = ${cDim = 500}
## for k2lru, how larger the virutal cache is than the physical cache?
**.vc_size_multiple_factor = ${VCMPC = 2}
**.cache_budget_file = "input_files/cb/${CBF = cb_dtel_edges_alg1}.dat"



#####################################################################
######################## Statistics ################################
#####################################################################
##Time window for the stability checking
**.window = ${window=60}
##Sampling hit_rate time
**.ts = 0.1
## Every **.window secs the engine checks for the stabilization. Every **.ts sec a sample is collected. Thus, the stabilization is checked every N samples, where N = **.window x **.ts .
##Number of nodes to be full (-1 defaults to *all* nodes) for starting statistic collections
**.partial_n = ${checkedNodes = 0.75 }
#<aa>
## A cache will be considered stable if the sequence of the last N samples have a variance smaller than
## this value
**.variance_threshold = ${variance=0.05}
#</aa>

##Time of simulation after the stabilization
**.steady = ${ steady = 1e5}
## Downsizing factor: in normal simulation down = 1. In TTL-based scaled scenario, down > 1 (i.e., newCatalog = Catalog / down)
**.downsize = ${down = 1 }







## OUTPUT FILES
output-vector-file = ${resultdir}/NET_${net}_${$cl}_ED_T_single_cache_NumCl_${numClients}_NumRep_${numRepos}_FS_${fs}_MC_${mc}_RS_${rs}_C_${cDim}_${CBF}_M_${totCont}_Lam_${lam}_A_${alp}_CT_${clientType}_ChNodes_${checkedNodes}_Down_${down}_RPF_${RPF}_CTRM_${CTRM}_S_${steady}_run_${repetition}.vec 
output-scalar-file = ${resultdir}/NET_${net}_${$cl}_ED_T_single_cache_NumCl_${numClients}_NumRep_${numRepos}_FS_${fs}_MC_${mc}_RS_${rs}_C_${cDim}_${CBF}_M_${totCont}_Lam_${lam}_A_${alp}_CT_${clientType}_ChNodes_${checkedNodes}_Down_${down}_RPF_${RPF}_CTRM_${CTRM}_S_${steady}_run_${repetition}.sca


